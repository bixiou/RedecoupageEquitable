griddash = "dot",
autotick = FALSE,
ticks = "outside",
tick0 = 0,
dtick = 0.1,
ticklen = 5,
tickwidth = 1,
tickcolor = toRGB("gray70"),
zeroline = T,
domain = c(0.15, 1)
),
yaxis = list(title = "",
showgrid = FALSE,
showline = FALSE,
showticklabels = FALSE,
categoryorder = "trace",
zeroline = FALSE),
hovermode = 'closest',
barmode = 'stack',
title = title,
titlefont = list(color='black'),
font = list(color='black'),
# paper_bgcolor = 'rgb(248, 248, 255)', plot_bgcolor = 'rgb(248, 248, 255)',
margin = list(l = margin_l, r = margin_r, t = margin_t, b = 22),
# margin = list(b = 20, t = margin_t),
legend = list(orientation='h', y=legendY, x=legendX, traceorder='normal', font=list(size=legendSize+8, color='black')), # family='Balto',  , family=legendFont # /!\ +6 added 01/04/2019
showlegend = showLegend) %>%
# labeling the y-axis
add_annotations(xref = 'paper', yref = 'y', x = 0.14, y = labels,
xanchor = 'right',
text = labels,
font = list(family = 'Arial', size = 20, color = 'black'),  # /!\ size: 14 => 20, 01/04/2019
showarrow = FALSE, align = 'right') # %>%
print(nrow(data))
print(nrow(hovers))
print(ncol(hovers))
if (nrow(data)>1) { for (i in 2:nrow(data)) {
bars <- add_trace(bars, x = data[i,], name=legend[i], text = hovers[,i], hoverinfo = 'text', marker = list(color = color[i])) # evaluate=TRUE,
} }
# labeling the first Likert scale (on the top)
# add_annotations(xref = 'x', yref = 'paper',
#                 x = c(10, 90, 110),
#                 y = 1.05,
#                 text = c("Oui", "Non", "NSP"),
#                 font = list(family = 'Arial', size = 16, color = 'black'),
#                 showarrow = FALSE) # %>%
# labeling the percentages of each bar (x_axis)
# add_annotations(xref = 'x', yref = 'y',
#                 x = o / 2, y = labels,
#                 text = paste(data[,"oui"], '%'),
#                 font = list(family = 'Arial', size = 14, color = 'white'),
#                 showarrow = FALSE) %>%
# add_annotations(xref = 'x', yref = 'y',
#                 x = o + n / 2, y = labels,
#                 text = paste(data[,"non"], '%'),
#                 font = list(family = 'Arial', size = 14, color = 'white'),
#                 showarrow = FALSE) %>%
# add_annotations(xref = 'x', yref = 'y',
#                 x = o + n + nsp / 2, y = labels,
#                 text = paste(data[,"nsp"], '%'),
#                 font = list(family = 'Arial', size = 14, color = 'white'),
#                 showarrow = FALSE) %>%
if (online) { api_create(bars, filename=file, sharing="public") }
return(bars)
}
barres(data=data_rdb(), file="demogrant", labels=c("social aid for those with no income", "social aid <br>for single pers. >25y w/o income", "basic income", "how much the State should insure to all", "minimum income guaranteed to all"), color=c('darkred', color5 ,'lightgrey'), hover=c("Less than 450", "451 to 600", "601 to 900", "901 to 1250", "1250 to 1700", "More than 1700", "PNR"), nsp=TRUE, sort=FALSE, legend=c("Less than 450", "451 to 600", "601 to 900", "901 to 1250", "1250 to 1700", "More than 1700", "PNR"), showLegend=T, margin_r=0, margin_l=NA)
barres <- function(data, file, title="", labels, color, hover=legend, nsp=TRUE, sort=TRUE, legend=hover, showLegend=T, margin_r=0, margin_l=NA, online=FALSE) {
margin_t <- 0
if (title!="") { margin_t <- 100 }
if (grepl("<br>", title)) { margin_t <- 150 }
legendSize <- 10
legendY <- 1.1
legendX <- 0.2
# legendFont <- 'Open Sans'
if (is.na(margin_l)) { margin_l <- 4.7*max(nchar(labels)) }
if (max(nchar(labels)) > 25) { legendSize <- 9 }
# if (max(nchar(labels)) > 50) { legendSize <- 8 }
# if (max(nchar(labels)) > 60) { legendSize <- 7 }
if (max(nchar(labels)) > 50) { # 70
legendSize <- 11
legendY = 1.2
legendX=1
margin_t = 170
}
if (!showLegend) { margin_t <- margin_t - 70}
if (sort) {
agree <- c()
if (nrow(data)==5 | nrow(data)==6) { for (i in 1:length(labels)) { agree <- c(agree, data[4, i] + data[5, i]) } }
else if (nrow(data)==7) { for (i in 1:length(labels)) { agree <- c(agree, data[6, i] + data[7, i]) } }
else { for (i in 1:length(labels)) { agree <- c(agree, data[1, i]) } }
labels <- labels[order(agree)]
data <- matrix(data[, order(agree)], nrow=nrow(data))
}
if (nrow(data)==1) {
hover <- hover[order(agree)]
for (i in 1:length(hover)) { hover[i] <- paste(hover[i], "<br>Choisi dans ", round(100*data[1, i]), "% des réponses", sep="")}
hovers <- matrix(hover, nrow=length(hover))
}
else {
hovers <- c()
if (nsp) {
for (i in 1:(length(hover)-1)) {
for (j in 1:length(labels)) {
hovers <- c(hovers, paste(hover[i], '<br>', round(100*data[i, j]/(1+data[length(hover), j])), '% des réponses<br>', round(100*data[i, j]), '% des réponses exprimées') )
}
}
for (j in 1:length(labels)) {
hovers <- c(hovers, paste(hover[length(hover)], '<br>', round(100*data[length(hover), j]/(1+data[length(hover), j])), '% des réponses<br>') )
}
}
else {
if (is.element(hover[length(hover)],c("PNR", "NSP"))) hover <- hover[1:(length(hover)-1)]
if (is.element(legend[length(legend)],c("PNR", "NSP"))) legend <- legend[1:(length(legend)-1)]
for (i in 1:length(hover)) {
for (j in 1:length(labels)) {
hovers <- c(hovers, paste(hover[i], '<br>', round(100*data[i, j]), '% des réponses exprimées<br>') )
}
}
}
hovers <- matrix(hovers, ncol=length(hover))
}
bars <- plot_ly(x = data[1,], y = labels, type = 'bar', orientation = 'h', text = hovers[,1], # sort=FALSE,
hoverinfo = 'text', name=legend[1], marker = list(color = color[1], line = list(color = 'white', width = 0))) %>%
layout(xaxis = list(title = "",
showgrid = T,
showline = FALSE,
showticklabels = T,
gridcolor = toRGB("gray70"), # + noir, + proche de 0
gridwidth = 1,
griddash = "dot",
autotick = FALSE,
ticks = "outside",
tick0 = 0,
dtick = 0.1,
ticklen = 5,
tickwidth = 1,
tickcolor = toRGB("gray70"),
zeroline = T,
domain = c(0.15, 1)
),
yaxis = list(title = "",
showgrid = FALSE,
showline = FALSE,
showticklabels = FALSE,
categoryorder = "trace",
zeroline = FALSE),
hovermode = 'closest',
barmode = 'stack',
title = title,
titlefont = list(color='black'),
font = list(color='black'),
# paper_bgcolor = 'rgb(248, 248, 255)', plot_bgcolor = 'rgb(248, 248, 255)',
margin = list(l = margin_l, r = margin_r, t = margin_t, b = 22),
# margin = list(b = 20, t = margin_t),
legend = list(orientation='h', y=legendY, x=legendX, traceorder='normal', font=list(size=legendSize+9, color='black')), # family='Balto',  , family=legendFont # /!\ +9 added 01/04/2019
showlegend = showLegend) %>%
# labeling the y-axis
add_annotations(xref = 'paper', yref = 'y', x = 0.14, y = labels,
xanchor = 'right',
text = labels,
font = list(family = 'Arial', size = 20, color = 'black'),  # /!\ size: 14 => 20, 01/04/2019
showarrow = FALSE, align = 'right') # %>%
print(nrow(data))
print(nrow(hovers))
print(ncol(hovers))
if (nrow(data)>1) { for (i in 2:nrow(data)) {
bars <- add_trace(bars, x = data[i,], name=legend[i], text = hovers[,i], hoverinfo = 'text', marker = list(color = color[i])) # evaluate=TRUE,
} }
# labeling the first Likert scale (on the top)
# add_annotations(xref = 'x', yref = 'paper',
#                 x = c(10, 90, 110),
#                 y = 1.05,
#                 text = c("Oui", "Non", "NSP"),
#                 font = list(family = 'Arial', size = 16, color = 'black'),
#                 showarrow = FALSE) # %>%
# labeling the percentages of each bar (x_axis)
# add_annotations(xref = 'x', yref = 'y',
#                 x = o / 2, y = labels,
#                 text = paste(data[,"oui"], '%'),
#                 font = list(family = 'Arial', size = 14, color = 'white'),
#                 showarrow = FALSE) %>%
# add_annotations(xref = 'x', yref = 'y',
#                 x = o + n / 2, y = labels,
#                 text = paste(data[,"non"], '%'),
#                 font = list(family = 'Arial', size = 14, color = 'white'),
#                 showarrow = FALSE) %>%
# add_annotations(xref = 'x', yref = 'y',
#                 x = o + n + nsp / 2, y = labels,
#                 text = paste(data[,"nsp"], '%'),
#                 font = list(family = 'Arial', size = 14, color = 'white'),
#                 showarrow = FALSE) %>%
if (online) { api_create(bars, filename=file, sharing="public") }
return(bars)
}
barres(data=data_rdb(), file="demogrant", labels=c("social aid for those with no income", "social aid <br>for single pers. >25y w/o income", "basic income", "how much the State should insure to all", "minimum income guaranteed to all"), color=c('darkred', color5 ,'lightgrey'), hover=c("Less than 450", "451 to 600", "601 to 900", "901 to 1250", "1250 to 1700", "More than 1700", "PNR"), nsp=TRUE, sort=FALSE, legend=c("Less than 450", "451 to 600", "601 to 900", "901 to 1250", "1250 to 1700", "More than 1700", "PNR"), showLegend=T, margin_r=0, margin_l=NA)
barres(data=data_seuils(data=t, variable=c("desavantager", "avantager"), miss=T, closed_left=FALSE, closed_right=T, seuils=c(2, 8, 10, 20, 40, 60)), file="dis_advantage_miss", labels=c("Percentage to disadvantage", "Percentage to advantage"), color=c('darkred', rainbow(5, end=5/15), 'forestgreen', 'lightgrey'), hover=c("Less than 2%", "3% to 8%", "9 to 10%", "11% to 20%", "21% to 40%", "41% to 60%", "More than 60%", "PNR"), nsp=T, sort=FALSE, showLegend=T, margin_r=0, margin_l=NA)
barres(data=data_rev_max_miss, file="income_max_miss", labels=rev(c("Legal maximum", "Legal + anti-tax argument", "Ideal maximum")), color=c(color5[1:4], 'blue', 'lightgrey'), hover=c("Less than 4,999€", "5,000€ to 9,999€", "10,000€ to 29,999€", "More than 30,000€", "No ceiling desired", "NPR"), legend=c("Less than 4,999€", "5,000€ to 9,999€", "10,000€ to 29,999€", "More than 30,000€", "No ceiling desired", "NPR"), nsp=T, sort=FALSE, showLegend=T, margin_r=0, margin_l=NA)
barres(data=data_rev_max_miss, file="income_max_miss", labels=rev(c("Legal maximum", "Legal + anti-tax argument", "Ideal maximum")), color=c(color5[1:4], 'blue', 'lightgrey'), hover=c("Less than 4,999€", "5,000€ to 9,999€", "10,000€ to 29,999€", "More than 30,000€", "No ceiling desired", "NPR"), legend=c("Less than 4,999€", "5,000€ to 9,999€", "10,000€ to 29,999€", "More than 30,000€", "No ceiling desired", "NPR"), nsp=T, sort=FALSE, showLegend=T, margin_r=0, margin_l=NA)
barres(file="notations_en", data=data_notation, sort=T, nsp=T, color=c(color5, "lightgrey"), legend = c(-2:0, "+1", "+2", "PNR"), hover=c(-2:0, "+1", "+2", "PNR"), labels=c("Actual", "Egalitarian", "Personalized", "Derived from utilitarian optimization", "Derived from rawlsian optimization", "Median proposed reform", "Demogrant median proposed reform"))
barres(file="notations_en", data=data_notation, sort=T, nsp=T, color=c(color5, "lightgrey"), legend = c(-2:0, "+1", "+2", "PNR"), hover=c(-2:0, "+1", "+2", "PNR"), labels=c("Actual", "Egalitarian", "Personalized", "Derived from utilitarian optimization", "Derived from rawlsian optimization", "Median proposed reform", "Demogrant median proposed reform"))
save.image("~/Google Drive/Economie/Travail/enquete/codes/.RData")
stargazer(Income_fit, Restr_fit, Main_fit, Large_fit, title="Socio-demographic determinants for approval of redistributive reforms",
covariate.labels = c("Constant", "Variant: Average", "Variant: Median", "Variant: Distortionary", "Variant: Demogrant", "Income (k€ per month)\\footnote{ The variable used is the individual disposable income capped at 4500€/month. This trimming corresponds to the top 5\\% of the distribution and helps getting relevant coefficients for incomes, given that the effect above 4500€/month. is relatively flat and uninteresting. }",
"Income$^2$", "Left - Right leaning (-2 to +2)", "Left - Right $^2$", "Disadvantaged", "Misunderstanding of graphics", "Wealth (0 to 6)", "Future wealth (0 to 6)", "Age (1 to 8)", "Gender: female", "Highest diploma (0 to 6)"),
omit = c("revdisp.NA", "gauche_droite.NA", "Patrimoine_futur.NA"),  dep.var.caption = "", dep.var.labels = "Approval of the reform", no.space=TRUE, intercept.bottom=FALSE, intercept.top=TRUE, omit.stat=c("adj.rsq", "f", "ser"), label="regression_main")
stargazer(restr2_fit, main2_fit, large_fit, title="Socio-demographic determinants for approval of redistributive reforms",
covariate.labels = c("Constant", "Variant: Average", "Variant: Median", "Variant: Distortionary", "Variant: Demogrant", "Income (k€ per month)\\footnote{ The variable used is the individual disposable income capped at 4500€/month. This trimming corresponds to the top 5\\% of the distribution and helps getting relevant coefficients for incomes, given that the effect above 4500€/month. is relatively flat and uninteresting. }",
"Income$^2$", "Left - Right leaning (-2 to +2)", "Left - Right $^2$", "Disadvantaged", "Misunderstanding of graphics", "Wealth (0 to 6)", "Future wealth (0 to 6)", "Age (1 to 8)", "Gender: female", "Vocational degree (CAP or BEP)"),
dep.var.caption = "", dep.var.labels = "Approval of the reform", no.space=TRUE, intercept.bottom=FALSE, intercept.top=TRUE, omit.stat=c("adj.rsq", "f", "ser"), label="regression_main")
package("foreign")
package("memisc")
package("Hmisc")
package("Rmisc")
package("DT")
package("pastecs")
package("lsr")
package("ggplot2")
package("stringr")
package("survey")
package("plotly")
package("plyr")
package("quantreg")
package("asbio")
package("stargazer")
package("xtable")
package("rockchalk")
package("clipr")
package("ineq")
package("smooth")
package("stats")
package("matrixStats")
vf <- read.csv("/media/adrien/chaine_humaine/www/cadastre_IDF/valeursfoncieres-2018.txt", sep='|', fileEncoding='latin')
package <- function(p) {
if (!is.element(p, installed.packages()[,1])) {
install.packages(p);
}
library(p, character.only = TRUE)
} # loads packages with automatical install if needed
package("Hmisc")
decrit <- function(variable, miss = FALSE, weights = NULL, numbers=FALSE) {
if (length(levels(variable)) > 10) {
p <- c()
for (n in levels(variable)) p <- c(p, mean(variable==n))
names(p) <- levels(variable)
p <- sort(p, decreasing =T)
if (miss) print(paste(length(!is.na(variable)), "non missing"))
return(round(p, 3))
} else {
if (length(annotation(variable))>0 & !numbers) {
if (!miss) {
# if (is.element("Oui", levels(as.factor(variable))) | grepl("(char)", annotation(variable)) | is.element("quotient", levels(as.factor(variable)))  | is.element("Pour", levels(as.factor(variable))) | is.element("Plutôt", levels(as.factor(variable))) ) { describe(as.factor(variable[variable!="" & !is.na(variable)]), weights = weights[variable!="" & !is.na(variable)], descript=Label(variable)) }
# else { describe(variable[variable!="" & !is.na(variable)], weights = weights[variable!="" & !is.na(variable)], descript=Label(variable)) }
if (length(which(!is.na(suppressWarnings(as.numeric(levels(as.factor(variable)))))))==0) { describe(as.factor(variable[variable!=""]), weights = weights[variable!=""], descript=Label(variable)) } # encore avant:  & !is.na(variable), avant: (length(which(is.numeric(levels(as.factor(variable)))))==0)
else { describe(as.numeric(as.vector(variable[variable!=""])), weights = weights[variable!=""], descript=Label(variable)) } # avant:  & !is.na(variable)
}
else {
if (length(which(suppressWarnings(!is.na(as.numeric(levels(as.factor(variable)))))))>10) describe(include.missings(variable[variable!="" & !is.na(variable)]), weights = weights[variable!="" & !is.na(variable)], descript=Label(variable)) # encore avant:  & !is.na(variable), avant: (length(which(is.numeric(levels(as.factor(variable)))))==0)
else describe(as.factor(include.missings(variable[variable!="" & !is.na(variable)])), weights = weights[variable!="" & !is.na(variable)], descript=Label(variable)) }
}
else {
if (length(annotation(variable))>0) {
if (miss) describe(variable[variable!=""], weights = weights[variable!=""], descript=Label(variable))
else describe(variable[variable!="" & !is.missing(variable)], weights = weights[variable!="" & !is.missing(variable)], descript=paste(length(which(is.missing(variable))), "missing obs.", Label(variable)))
} else describe(variable[variable!=""], weights = weights[variable!=""])  } }
}
vf <- read.csv("/media/adrien/chaine_humaine/www/cadastre_IDF/valeursfoncieres-2018.txt", sep='|')
decrit(vf$Nature.mutation)
# Remove Adjudication (0.2%), Echange (1.3%), Expropriation (0%). Remains: Vente, Vente en l'état futur d'achèvement, Vente terrain à bâtir
vf <- vf[grepl("Vente", vf$Nature.mutation), -c(1:7,25:36,38)] # Remove Nombre de lots and description par lot
names(vf)
names(vf)[c(4,19,23)] <- c("prix", "surface_bati", "surface_terrain")
vf$prix_m2_bati <- vf$prix / vf$surface_bati # /!\ attention aux lots avec bâti ET terrain
names(vf)
vf$prix <- as.numeric(vf$prix)
vf$prix_m2_bati <- vf$prix / vf$surface_bati # /!\ attention aux lots avec bâti ET terrain
vf$prix_m2_terrain <- vf$prix / vf$surface_terrain # /!\ attention aux lots avec bâti ET terrain
##### Simulation of results of 2019 French European Elections #####
# by Adrien Fabre, fabre.adri1@gmail.com. Licence CC-BY. 04/05/2019.
# Sorry for writing in English, bad habit when I code.
# HOW TO: The file works the following way: enter the scores obtained from the polls in "scores", enter the sample size of the polls in "n",
#   and it returns: random draws of elections (accounting for the margin of error), corresponding seats distribution,
#   probabilities than each party exceeds the thresholds of 3% (funding) and 5% (seats), as well as the distribution of number of seats by party, given the polls.
# RESULTS:
#   - There is no uncertainty about which party will exceed 3% and be refunded: FI, PS, EELV, EM, LR and RN will, other will not
#   - There is uncertainty regarding the obtention of seats for only one party: PS (50% chance)
#   - Likely number of seats (it varies a bit according to the random draws):
#     - FI: 8 (62%), 9 (34%)
#     - PS: 0 (46%), 5 (54%)
#     - EELV: 8 (66%), 9 (30%)
#     - EM: 22 (36%), 23 (30%), 24 (26%)
#     - LR: 14 (50%), 15 (35%)
#     - RN: 22 (38%), 23 (29%)
#     - PCF, Gs, UDI, DLF, GJ and others: 0 (100%)
package <- function(p) {
if (!is.element(p, installed.packages()[,1])) {
install.packages(p);
}
library(p, character.only = TRUE)
} # loads packages with automatical install if needed
decrit <- function(variable, miss = FALSE, weights = NULL, numbers=FALSE) {
if (length(annotation(variable))>0 & !numbers) {
if (!miss) {
# if (is.element("Oui", levels(as.factor(variable))) | grepl("(char)", annotation(variable)) | is.element("quotient", levels(as.factor(variable)))  | is.element("Pour", levels(as.factor(variable))) | is.element("Plutôt", levels(as.factor(variable))) ) { describe(as.factor(variable[variable!="" & !is.na(variable)]), weights = weights[variable!="" & !is.na(variable)], descript=Label(variable)) }
# else { describe(variable[variable!="" & !is.na(variable)], weights = weights[variable!="" & !is.na(variable)], descript=Label(variable)) }
if (length(which(!is.na(suppressWarnings(as.numeric(levels(as.factor(variable)))))))==0) { describe(as.factor(variable[variable!=""]), weights = weights[variable!=""], descript=Label(variable)) } # encore avant:  & !is.na(variable), avant: (length(which(is.numeric(levels(as.factor(variable)))))==0)
else { describe(as.numeric(as.vector(variable[variable!=""])), weights = weights[variable!=""], descript=Label(variable)) } # avant:  & !is.na(variable)
}
else {
if (length(which(suppressWarnings(!is.na(as.numeric(levels(as.factor(variable)))))))>10) describe(include.missings(variable[variable!="" & !is.na(variable)]), weights = weights[variable!="" & !is.na(variable)], descript=Label(variable)) # encore avant:  & !is.na(variable), avant: (length(which(is.numeric(levels(as.factor(variable)))))==0)
else describe(as.factor(include.missings(variable[variable!="" & !is.na(variable)])), weights = weights[variable!="" & !is.na(variable)], descript=Label(variable)) }
}
else {
if (length(annotation(variable))>0) {
if (miss) describe(variable[variable!=""], weights = weights[variable!=""], descript=Label(variable))
else describe(variable[variable!="" & !is.missing(variable)], weights = weights[variable!="" & !is.missing(variable)], descript=paste(length(which(is.missing(variable))), "missing obs.", Label(variable)))
} else describe(variable[variable!=""], weights = weights[variable!=""])  }
}
package("electoral")
package("memisc")
package("Hmisc")
n <- 5000 # sample size supposed (as if all scores were taken from one same survey): the higher n, the lower the margin of error considered
k <- 1000 # number of random draws
s <- 79 # number of seats (79 after Brexit, 74 before)
partis <- c("FI", "PCF", "Gs", "PS", "EELV", "EM", "UDI", "LR", "DLF", "RN", "GJ")
# Scores approximated from the graph of survey tendencies, from wikipedia 02/05/19
voix <- c(8, 4, 3, 5.2, 8, 22.5, 1.5, 13, 4, 23.5, 2)/100
names(voix) <- partis
seats_ha(partis, ifelse(voix >= 0.05, voix, 0), s, "dhondt") # Deterministic seats projection
# Jefferson/D'Hondt appears to be the method used for French European elections, source: https://fr.wikipedia.org/wiki/Scrutin_proportionnel_plurinominal
# Scores most likely using survey aggregation statistical inference, from wikipedia 02/05/19
voix_wiki <- c(8.35, 2.4, 3.41, 5.03, 8.29, 22.17, 2.39, 13.95, 4.15, 21.68, 2.49)/100
names(voix_wiki) <- partis
scores <- voix
# Deterministic seats projection
seats_ha(partis, ifelse(scores >= 0.05, scores, 0), s, "dhondt")
# Scores approximated from the graph of survey tendencies, from wikipedia 02/05/19
voix <- c(6.31, 2.4, 3.3, 6.19, 13.47, 22.41, 1.5, 8.48, 4, 23.31, 2)/100
scores <- voix
# Deterministic seats projection
seats_ha(partis, ifelse(scores >= 0.05, scores, 0), s, "dhondt")
# We estimate the distribution of the score of a party using Jeffreys interval for a binomial distribution.
# Source: https://en.wikipedia.org/wiki/Binomial_proportion_confidence_interval
random_scores <- random_seats <- matrix(NA, dimnames = list(partis), nrow = length(partis), ncol = k)
for (p in partis) random_scores[p,] <- rbeta(k, scores[p]*n+0.5, (1-scores[p])*n+0.5)
for (i in 1:k) random_seats[,i] <- seats_ha(partis, ifelse(random_scores[,i] >= 0.05, random_scores[,i], 0), s, "dhondt")
# Distribution of number of seats for each party
for (p in partis) { print(p); print(decrit(random_seats[p,]))}
# We estimate the distribution of the score of a party using Jeffreys interval for a binomial distribution.
# Source: https://en.wikipedia.org/wiki/Binomial_proportion_confidence_interval
random_scores <- random_seats <- matrix(NA, dimnames = list(partis), nrow = length(partis), ncol = k)
for (p in partis) random_scores[p,] <- rbeta(k, scores[p]*n+0.5, (1-scores[p])*n+0.5)
warnings()
for (i in 1:k) random_seats[,i] <- seats_ha(partis, ifelse(random_scores[,i] >= 0.05, random_scores[,i], 0), s, "dhondt")
# Distribution of number of seats for each party
for (p in partis) { print(p); print(decrit(random_seats[p,]))}
scores
random_scores[,1]
random_scores[,10]
random_scores[,100]
scores
names(voix) <- partis
# We estimate the distribution of the score of a party using Jeffreys interval for a binomial distribution.
# Source: https://en.wikipedia.org/wiki/Binomial_proportion_confidence_interval
random_scores <- random_seats <- matrix(NA, dimnames = list(partis), nrow = length(partis), ncol = k)
for (p in partis) random_scores[p,] <- rbeta(k, scores[p]*n+0.5, (1-scores[p])*n+0.5)
for (i in 1:k) random_seats[,i] <- seats_ha(partis, ifelse(random_scores[,i] >= 0.05, random_scores[,i], 0), s, "dhondt")
# Distribution of number of seats for each party
for (p in partis) { print(p); print(decrit(random_seats[p,]))}
seats_ha(partis, ifelse(voix >= 0.05, voix, 0), s, "dhondt") # Deterministic seats projection
scores <- voix
# We estimate the distribution of the score of a party using Jeffreys interval for a binomial distribution.
# Source: https://en.wikipedia.org/wiki/Binomial_proportion_confidence_interval
random_scores <- random_seats <- matrix(NA, dimnames = list(partis), nrow = length(partis), ncol = k)
for (p in partis) random_scores[p,] <- rbeta(k, scores[p]*n+0.5, (1-scores[p])*n+0.5)
for (i in 1:k) random_seats[,i] <- seats_ha(partis, ifelse(random_scores[,i] >= 0.05, random_scores[,i], 0), s, "dhondt")
# Distribution of number of seats for each party
for (p in partis) { print(p); print(decrit(random_seats[p,]))}
s <- 74 # number of seats (79 after Brexit, 74 before)
# Deterministic seats projection
seats_ha(partis, ifelse(scores >= 0.05, scores, 0), s, "dhondt")
# We estimate the distribution of the score of a party using Jeffreys interval for a binomial distribution.
# Source: https://en.wikipedia.org/wiki/Binomial_proportion_confidence_interval
random_scores <- random_seats <- matrix(NA, dimnames = list(partis), nrow = length(partis), ncol = k)
for (p in partis) random_scores[p,] <- rbeta(k, scores[p]*n+0.5, (1-scores[p])*n+0.5)
for (i in 1:k) random_seats[,i] <- seats_ha(partis, ifelse(random_scores[,i] >= 0.05, random_scores[,i], 0), s, "dhondt")
# Distribution of number of seats for each party
for (p in partis) { print(p); print(decrit(random_seats[p,]))}
pop_circos
package('foreign')
package("readxl")
package("mfx")
package("Hmisc")
package("plyr")
# setwd("/var/www/We give the 99 percents/Redécoupage") # /!\ Changer le chemin d'accès
setwd("/var/www/RedecoupageEquitable/Annexes") # /!\ Changer le chemin d'accès
load("env.RData")
pop_circos
# Population par circonscription actuelle (2013) Source: https://www.insee.fr/fr/statistiques/2508230
pop_circos <- read_excel("pop_circos_2013.xls")
pop_circos
View(pop_circos)
View(pop_circos)
# Population par circonscription actuelle (2013) Source: https://www.insee.fr/fr/statistiques/2508230
pop_circos <- read_excel("pop_circos_2013.xls")
dep_circos <- pop_circos[[1]][-c(1:7)]
pop_circos <- as.numeric(pop_circos[[4]][-c(1:7)]) # Population municipale
pop_circos
dep_circos <- c(pop_circos[[1]][-c(1:7)], "Amérique Nord", "Amérique latine", "Europe Nord", "Benelux", "Ibère", "Suisse", "Europe centrale", "Méditerrannée", "Maghreb et Afrique Ouest", "Proche-Orient et Afrique", "Asie et autre")
# Population par circonscription actuelle (2013) Source: https://www.insee.fr/fr/statistiques/2508230
pop_circos <- read_excel("pop_circos_2013.xls")
dep_circos <- c(pop_circos[[1]][-c(1:7)], "Amérique Nord", "Amérique latine", "Europe Nord", "Benelux", "Ibère", "Suisse", "Europe centrale", "Méditerrannée", "Maghreb et Afrique Ouest", "Proche-Orient et Afrique", "Asie et autre")
pop_circos <- as.numeric(pop_circos[[4]][-c(1:7)]) # Population municipale
# Ajout des français de l'étranger à partir de Wikipédia: https://fr.wikipedia.org/wiki/Circonscriptions_l%C3%A9gislatives_des_Fran%C3%A7ais_%C3%A9tablis_hors_de_France
# Renormalisation en termes de population totale et non d'inscrits. Source: , http://www.vie-publique.fr/focus/elections-2017-combien-electeurs-inscrits.html, https://fr.wikipedia.org/wiki/D%C3%A9mographie_de_la_France
ratio_pop_inscrits <- 67/45.7
pop_circos <- pop_circos[order(c(pop_circos,ratio_pop_inscrits*c(259390,101084,173477,185502,112029,179597,151576,137560,171290,158312,152371)))]
pop_circos
length(pop_circos)
# Population par circonscription actuelle (2013) Source: https://www.insee.fr/fr/statistiques/2508230
pop_circos <- read_excel("pop_circos_2013.xls")
dep_circos <- c(pop_circos[[1]][-c(1:7)], "Amérique Nord", "Amérique latine", "Europe Nord", "Benelux", "Ibère", "Suisse", "Europe centrale", "Méditerrannée", "Maghreb et Afrique Ouest", "Proche-Orient et Afrique", "Asie et autre")
pop_circos <- as.numeric(pop_circos[[4]][-c(1:7)]) # Population municipale
# Ajout des français de l'étranger à partir de Wikipédia: https://fr.wikipedia.org/wiki/Circonscriptions_l%C3%A9gislatives_des_Fran%C3%A7ais_%C3%A9tablis_hors_de_France
# Renormalisation en termes de population totale et non d'inscrits. Source: , http://www.vie-publique.fr/focus/elections-2017-combien-electeurs-inscrits.html, https://fr.wikipedia.org/wiki/D%C3%A9mographie_de_la_France
ratio_pop_inscrits <- 67/45.7
length(pop_circos)
test <- order(c(pop_circos,ratio_pop_inscrits*c(259390,101084,173477,185502,112029,179597,151576,137560,171290,158312,152371)))
pop_circos <- c(pop_circos,ratio_pop_inscrits*c(259390,101084,173477,185502,112029,179597,151576,137560,171290,158312,152371))[test]
pop_circos
pop_circos <- read_excel("pop_circos_2013.xls")
dep_circos <- c(pop_circos[[1]][-c(1:7)], "Amérique Nord", "Amérique latine", "Europe Nord", "Benelux", "Ibère", "Suisse", "Europe centrale", "Méditerrannée", "Maghreb et Afrique Ouest", "Proche-Orient et Afrique", "Asie et autre")
pop_circos <- as.numeric(pop_circos[[4]][-c(1:7)]) # Population municipale
# Ajout des français de l'étranger à partir de Wikipédia: https://fr.wikipedia.org/wiki/Circonscriptions_l%C3%A9gislatives_des_Fran%C3%A7ais_%C3%A9tablis_hors_de_France
# Renormalisation en termes de population totale et non d'inscrits. Source: , http://www.vie-publique.fr/focus/elections-2017-combien-electeurs-inscrits.html, https://fr.wikipedia.org/wiki/D%C3%A9mographie_de_la_France
ratio_pop_inscrits <- 67/45.7
dep_circos <- dep_circos[order(c(pop_circos,ratio_pop_inscrits*c(259390,101084,173477,185502,112029,179597,151576,137560,171290,158312,152371)))]
pop_circos <- sort(c(pop_circos,ratio_pop_inscrits*c(259390,101084,173477,185502,112029,179597,151576,137560,171290,158312,152371)))
circos_actuelles <- cbind(dep_circos, pop_circos)
circos_actuelles
circos_actuelles$pop_circos
package("tidyverse")
# Population par circonscription actuelle (2013) Source: https://www.insee.fr/fr/statistiques/2508230
pop_circos <- read_excel("pop_circos_2013.xls")
dep_circos <- c(pop_circos[[1]][-c(1:7)], "Amérique Nord", "Amérique latine", "Europe Nord", "Benelux", "Ibère", "Suisse", "Europe centrale", "Méditerrannée", "Maghreb et Afrique Ouest", "Proche-Orient et Afrique", "Asie et autre")
pop_circos <- as.numeric(pop_circos[[4]][-c(1:7)]) # Population municipale
# Ajout des français de l'étranger à partir de Wikipédia: https://fr.wikipedia.org/wiki/Circonscriptions_l%C3%A9gislatives_des_Fran%C3%A7ais_%C3%A9tablis_hors_de_France
# Renormalisation en termes de population totale et non d'inscrits. Source: , http://www.vie-publique.fr/focus/elections-2017-combien-electeurs-inscrits.html, https://fr.wikipedia.org/wiki/D%C3%A9mographie_de_la_France
ratio_pop_inscrits <- 67/45.7
dep_circos <- dep_circos[order(c(pop_circos,ratio_pop_inscrits*c(259390,101084,173477,185502,112029,179597,151576,137560,171290,158312,152371)))]
pop_circos <- sort(c(pop_circos,ratio_pop_inscrits*c(259390,101084,173477,185502,112029,179597,151576,137560,171290,158312,152371)))
length("03" %in% dep_circos)
length(which("03" %in% dep_circos))
which("03" %in% dep_circos)
"03" %in% dep_circos
table(dep_circos)
table(dep_circos)['03']
table(dep_circos)[dep_circos]
circos_actuelles <- cbind(dep_circos, pop_circos, table(dep_circos)[dep_circos])
circos_actuelles
circos_actuelles <- data.frame(dep_circos, pop_circos, table(dep_circos)[dep_circos])
circos_actuelles
circos_actuelles <- data.frame(dep_circos, pop_circos)
circos_actuelles
circos_actuelles <- data.frame(dep_circos, pop_circos, as.vector(table(dep_circos)[dep_circos]))
circos_actuelles
circos_actuelles <- data.frame(dep_circos, pop_circos, nb_in_dep = as.vector(table(dep_circos)[dep_circos]))
circos_actuelles
circos_actuelles <- data.frame(dep = dep_circos, pop = pop_circos, nb_in_dep = as.vector(table(dep_circos)[dep_circos]))
circos_actuelles
circos_actuelles[1:nb_too_inf,]
# Nombre de circonscriptions dont la population s'écarte de plus de 33% de la moyenne par le dessous, ce qui a été invalidé par le Conseil Constitutionnel
#    pour Paris: https://www.conseil-constitutionnel.fr/decision/2013/2013667DC.htm
nb_too_inf <- length(which(pop_circos<0.67*mean(pop_circos))) # 15, soit 2.6%
circos_actuelles[1:nb_too_inf,]
length(which(pop_circos>1.5*mean(pop_circos)))
9/577
circos_actuelles[dep=='39']
circos_actuelles[circos_actuelles$dep=='39',]
sum(circos_actuelles[circos_actuelles$dep=='39',])
sum(circos_actuelles[circos_actuelles$dep=='39','pop'])
sum(circos_actuelles[circos_actuelles$dep=='39','pop'])/mean(circos_actuelles$pop)
78378/mean(circos_actuelles$pop)
length(which(pop_circos>1.47*mean(pop_circos))) # 9, soit 1.6%
circos_actuelles[577:(577-nb_too_inf),]
circos_actuelles[577:(577-nb_too_sup),]
# Nombre de circonscriptions dont la population s'écarte de plus de 50% de la moyenne par le dessus, ce qui a été invalidé par le Conseil Constitutionnel
#    pour Paris: https://www.conseil-constitutionnel.fr/decision/2013/2013667DC.htm
nb_too_sup <- length(which(pop_circos>1.5*mean(pop_circos))) # 9, soit 1.6%
circos_actuelles[577:(577-nb_too_sup),]
circos_actuelles[577:(577-nb_too_sup+1),]
circos_actuelles
View(circos_actuelles)
sum(circos_actuelles[circos_actuelles$dep=='39','pop'])/mean(circos_actuelles$pop) # 2.18: il devrait y avoir deux circos en 39 (Jura) mais il y en a 3, la 2è circo étant 65% de la pop moyenne.
circos_actuelles[1:nb_too_inf,]
sum(circos_actuelles[circos_actuelles$dep=='15','pop'])/mean(circos_actuelles$pop)
sum(circos_actuelles[circos_actuelles$dep=='09','pop'])/mean(circos_actuelles$pop)
sum(circos_actuelles[circos_actuelles$dep=='90','pop'])/mean(circos_actuelles$pop)
sum(circos_actuelles[circos_actuelles$dep=='2A','pop'])/mean(circos_actuelles$pop)
sum(circos_actuelles[circos_actuelles$dep=='48','pop'])/mean(circos_actuelles$pop)
sum(circos_actuelles[4,'pop'])/mean(circos_actuelles$pop)
nb_too_sup <- length(which(pop_circos>1.33*mean(pop_circos))) # 9, soit 1.6%
nb_too_sup
# nb_too_sup <- length(which(pop_circos>1.5*mean(pop_circos))) # 9, soit 1.6%
circos_actuelles[577:(577-nb_too_sup),]
151788/mean(circos_actuelles$pop)
mean(circos_actuelles$pop)
mean(pop_circos)
164245/mean(circos_actuelles$pop)
nb_too_sup <- length(which(pop_circos>1.33*mean(pop_circos))) # 9, soit 1.6%
nb_too_sup
# nb_too_sup <- length(which(pop_circos>1.33*mean(pop_circos))) # 9, soit 1.6%
circos_actuelles[577:(577-nb_too_sup+1),]
