scores_distrib <- rankings(grades=distributions, names=distributions_names, scale=-2:2)
write_clip(print.xtable(xtable(scores_elec2012, digits=0)))
##### Fonctions #####
package("memisc")
write_clip(print.xtable(xtable(scores_elec2012, digits=0)))
##### Fonctions #####
package("clipr")
write_clip(print.xtable(xtable(scores_elec2012, digits=0)))
package("xtable")
write_clip(print.xtable(xtable(scores_elec2012, digits=0)))
write_clip(print.xtable(xtable(scores_distrib, digits=0)))
View(rankings(c(0.05, 0.15, 0.25, 0.35, 0.5), 'mj'))
rankings(c(0.05, 0.15, 0.25, 0.35, 0.5), 'mj')
rankings(c(0.05, 0.15, 0.25, 0.35, 0.5))
mj <- function(grades, k = 0.5, name="", print = T, return_text = FALSE) {
alpha <- 0
i <- 0
while (alpha < k) {
i <- i + 1
alpha <- alpha + grades[i]  }
p <- 1 - alpha
q <- alpha - grades[i]
g <- i-3
if (g > -2 & g < 2) {
if (p*k > q*(1-k)) text = paste(g, "+ ", sep="")
else  text = paste(g, "- ", sep="")  }
else text = paste(g," ")
if (print & !return_text) print(paste(text, name, sep=""))
if (return_text) return(text)
else return(g + (p>q)*p - (p<=q)*q)
}
View(rankings(c(0.05, 0.15, 0.25, 0.35, 0.5), fun='mj'))
rankings <- function(quantiles = c(0.1, 0.2, 0.3, 0.4, 0.5), fun='old_gauge', main = 0.5, grades = grades_m, names = distribution_names, print_names = T, return_text = FALSE) {
main_scores <- aggregate_scores(main, fun=fun, grades, names, print = FALSE)
order <- order(main_scores, decreasing = TRUE)
if (print_names) {
res <- matrix(nrow = ncol(grades), ncol = 3+length(quantiles))
res[,1] <- names[order]  }
else res <- matrix(nrow = ncol(grades), ncol = 2+length(quantiles))
for (i in (1:length(quantiles))) {
res[,i+print_names] <- aggregate_scores(quantiles[i], fun=fun, grades, names, print = FALSE, return_text)[order] }
if (print_names) res[,length(quantiles)+print_names+1] <- aggregate_scores(main, fun=fun, grades, names, print = FALSE, return_text = T)[order]
else res[,length(quantiles)+print_names+1] <- (substr(aggregate_scores(main, fun=fun, grades, names, print = FALSE, return_text = T)[order], 1,1)=="-")*as.numeric(paste(substr(aggregate_scores(main, fun=fun, grades, names, print = FALSE, return_text = T)[order], 2,2),0,sep=""))*(-0.1) + (substr(aggregate_scores(main, fun=fun, grades, names, print = FALSE, return_text = T)[order], 1,1)!="-")*as.numeric(paste(substr(aggregate_scores(main, fun=fun, grades, names, print = FALSE, return_text = T)[order], 1,1),0,sep=""))/10
for (j in (1:ncol(grades))) res[j,length(quantiles)+print_names+2] <- round(sum(grades[,order[j]]*(-2:2)),3)
return(res)
}
View(rankings(c(0.05, 0.15, 0.25, 0.35, 0.5), fun='mj'))
aggregate_scores <- function(k = 0.5, fun='old_gauge', grades = grades_m, names = distribution_names, print = T, return_text = FALSE) {
# res <- matrix(ncol = length(names), nrow = 4)
res <- c()
# for (i in 1:ncol(grades)) res[,i] <- gauge(grades[,i], k, names[i])
for (i in 1:ncol(grades)) {
if (fun=='old_gauge') res <- c(res, old_gauge(grades[,i], k, names[i], print, return_text))
else if (fun=='mj') res <- c(res, mj(grades[,i], k, names[i], print, return_text))
else if (fun=='score_s') res <- c(res, score_s(grades[,i], k, names[i], print, return_text))
else if (fun=='score_delta') res <- c(res, score_delta(grades[,i], k, names[i], print, return_text))
}
if (return_text) return(res)
else return(round(res, 3))
}
View(rankings(c(0.05, 0.15, 0.25, 0.35, 0.5), fun='mj'))
rankings(c(0.05, 0.15, 0.25, 0.35, 0.5), fun='mj')
View(rankings(c(0.15, 0.25, 0.35, 0.45, 0.5), fun='mj'))
mj <- function(grades, k = 0.5, name="", print = T, return_text = FALSE) {
alpha <- 0
i <- 0
while (alpha < k) {
i <- i + 1
alpha <- alpha + grades[i]  }
p <- 1 - alpha
q <- alpha - grades[i]
g <- i-3
if (g > -2 & g < 2) {
if (p*k > q*(1-k)) text = paste(g, "+ ", sep="")
else  text = paste(g, "- ", sep="")  }
else text = paste(g," ")
if (print & !return_text) print(paste(text, name, sep=""))
if (return_text) return(text)
else return(g + (p>q)*p - (p<=q)*q)
}
old_gauges <- function(k = 0.5, grades = grades_m, names = distribution_names, print = T, return_text = FALSE) {
# res <- matrix(ncol = length(names), nrow = 4)
res <- c()
# for (i in 1:ncol(grades)) res[,i] <- gauge(grades[,i], k, names[i])
for (i in 1:ncol(grades)) res <- c(res, gauge(grades[,i], k, names[i], print, return_text))
if (return_text) return(res)
else return(round(res, 3))
}
old_ranking <- function(k = 0.5, grades = grades_m, names = distribution_names, print = FALSE) {
res <- matrix(nrow = ncol(grades), ncol = 3)
gauges <- gauges(k, grades, names, print)
res[,1] <- names[order(gauges, decreasing = TRUE)]
res[,2] <- gauges(k, grades, names, print, return_text = TRUE)[order(gauges, decreasing = TRUE)]
res[,3] <- sort(gauges, decreasing = TRUE)
return(res)
}
old_rankings <- function(quantiles = c(0.1, 0.2, 0.3, 0.4, 0.5), main = 0.5, grades = grades_m, names = distribution_names, print_names = T, return_text = FALSE) {
main_gauges <- gauges(main, grades, names, print = FALSE)
order <- order(main_gauges, decreasing = TRUE)
if (print_names) {
res <- matrix(nrow = ncol(grades), ncol = 3+length(quantiles))
res[,1] <- names[order]  }
else res <- matrix(nrow = ncol(grades), ncol = 2+length(quantiles))
for (i in (1:length(quantiles))) {
res[,i+print_names] <- gauges(quantiles[i], grades, names, print = FALSE, return_text)[order] }
if (print_names) res[,length(quantiles)+print_names+1] <- gauges(main, grades, names, print = FALSE, return_text = T)[order]
else res[,length(quantiles)+print_names+1] <- (substr(gauges(main, grades, names, print = FALSE, return_text = T)[order], 1,1)=="-")*as.numeric(paste(substr(gauges(main, grades, names, print = FALSE, return_text = T)[order], 2,2),0,sep=""))*(-0.1) + (substr(gauges(main, grades, names, print = FALSE, return_text = T)[order], 1,1)!="-")*as.numeric(paste(substr(gauges(main, grades, names, print = FALSE, return_text = T)[order], 1,1),0,sep=""))/10
for (j in (1:ncol(grades))) res[j,length(quantiles)+print_names+2] <- round(sum(grades[,order[j]]*(-2:2)),3)
return(res)
}
aggregate_scores <- function(k = 0.5, fun='old_gauge', grades = grades_m, names = distribution_names, print = T, return_text = FALSE) {
# res <- matrix(ncol = length(names), nrow = 4)
res <- c()
# for (i in 1:ncol(grades)) res[,i] <- gauge(grades[,i], k, names[i])
for (i in 1:ncol(grades)) {
if (fun=='old_gauge') res <- c(res, old_gauge(grades[,i], k, names[i], print, return_text))
else if (fun=='mj') res <- c(res, mj(grades[,i], k, names[i], print, return_text))
else if (fun=='score_s') res <- c(res, score_s(grades[,i], k, names[i], print, return_text))
else if (fun=='score_delta') res <- c(res, score_delta(grades[,i], k, names[i], print, return_text))
}
if (return_text) return(res)
else return(round(res, 3))
}
ranking <- function(k = 0.5, fun='old_gauge', grades = grades_m, names = distribution_names, print = FALSE) {
res <- matrix(nrow = ncol(grades), ncol = 3)
scores <- aggregate_scores(k, fun=fun, grades, names, print)
scores_text <- aggregate_scores(k, fun=fun, grades, names, print, return_text = TRUE)
res[,1] <- names[order(scores, decreasing = TRUE)]
res[,2] <- scores_text[order(scores, decreasing = TRUE)]
res[,3] <- sort(scores, decreasing = TRUE)
return(res)
}
rankings <- function(quantiles = c(0.1, 0.2, 0.3, 0.4, 0.5), fun='old_gauge', main = 0.5, grades = grades_m, names = distribution_names, print_names = T, return_text = FALSE) {
main_scores <- aggregate_scores(main, fun=fun, grades, names, print = FALSE)
order <- order(main_scores, decreasing = TRUE)
if (print_names) {
res <- matrix(nrow = ncol(grades), ncol = 3+length(quantiles))
res[,1] <- names[order]  }
else res <- matrix(nrow = ncol(grades), ncol = 2+length(quantiles))
for (i in (1:length(quantiles))) {
res[,i+print_names] <- aggregate_scores(quantiles[i], fun=fun, grades, names, print = FALSE, return_text)[order] }
if (print_names) res[,length(quantiles)+print_names+1] <- aggregate_scores(main, fun=fun, grades, names, print = FALSE, return_text = T)[order]
else res[,length(quantiles)+print_names+1] <- (substr(aggregate_scores(main, fun=fun, grades, names, print = FALSE, return_text = T)[order], 1,1)=="-")*as.numeric(paste(substr(aggregate_scores(main, fun=fun, grades, names, print = FALSE, return_text = T)[order], 2,2),0,sep=""))*(-0.1) + (substr(aggregate_scores(main, fun=fun, grades, names, print = FALSE, return_text = T)[order], 1,1)!="-")*as.numeric(paste(substr(aggregate_scores(main, fun=fun, grades, names, print = FALSE, return_text = T)[order], 1,1),0,sep=""))/10
for (j in (1:ncol(grades))) res[j,length(quantiles)+print_names+2] <- round(sum(grades[,order[j]]*(-2:2)),3)
return(res)
}
rankings(c(0.15, 0.25, 0.35, 0.45, 0.5), fun='mj')
rankings(c(0.15, 0.25, 0.35, 0.45, 0.5), fun='mj')
# names(at) <- c("quantiles", "revenus")
# write.table(matrix(c(seq(0.001,1,0.001), round_any(interpole(seq(0.001,1,0.001), at$revenu[1:595], at$quantiles[1:595]), 0.1)), 1000, 2), file="../distributions/rev_imputable_i", sep = ";", row.names = FALSE, col.names = TRUE)
# av <- as.data.frame(matrix(c(seq(0.001,1,0.001), round_any(interpole(seq(0.001,1,0.001), at$revenu[1:595], at$quantiles[1:595]), 0.1)), 1000, 2))
# names(av) <- c("quantiles", "revenus")
# rd <- read.csv("/media/adrien/895f16d0-85c8-4b2e-aba8-357389065e47/adrien/DD/Économie/Données/ERFS_2012/fonctionRepartition_revdisp_i.txt", sep="\t")
# names(rd) <- c("quantiles", "revenus")
# write.table(matrix(c(seq(0.001,1,0.001), round_any(interpole(seq(0.001,1,0.001), rd$revenu[1:597], rd$quantiles[1:597]), 0.1)), 1000, 2), file="../distributions/revenu_disponible_i", sep = ";", row.names = FALSE, col.names = TRUE)
# rev <- as.data.frame(matrix(c(seq(0.001,1,0.001), round_any(interpole(seq(0.001,1,0.001), rd$revenu[1:597], rd$quantiles[1:597]), 0.1)), 1000, 2))
# names(rev) <- c("quantiles", "revenus")
#ad <- read.csv2("behavioral_response_adultes.csv")
rr <- read.csv("/var/www/enquete/reforme_mediane.csv", sep="\t")
rr <- as.data.frame(matrix(c(seq(0.001,1,0.001), rr[-1]), 1000, 2))
names(rr) <- c("quantiles", "revenus")
rr
# names(at) <- c("quantiles", "revenus")
# write.table(matrix(c(seq(0.001,1,0.001), round_any(interpole(seq(0.001,1,0.001), at$revenu[1:595], at$quantiles[1:595]), 0.1)), 1000, 2), file="../distributions/rev_imputable_i", sep = ";", row.names = FALSE, col.names = TRUE)
# av <- as.data.frame(matrix(c(seq(0.001,1,0.001), round_any(interpole(seq(0.001,1,0.001), at$revenu[1:595], at$quantiles[1:595]), 0.1)), 1000, 2))
# names(av) <- c("quantiles", "revenus")
# rd <- read.csv("/media/adrien/895f16d0-85c8-4b2e-aba8-357389065e47/adrien/DD/Économie/Données/ERFS_2012/fonctionRepartition_revdisp_i.txt", sep="\t")
# names(rd) <- c("quantiles", "revenus")
# write.table(matrix(c(seq(0.001,1,0.001), round_any(interpole(seq(0.001,1,0.001), rd$revenu[1:597], rd$quantiles[1:597]), 0.1)), 1000, 2), file="../distributions/revenu_disponible_i", sep = ";", row.names = FALSE, col.names = TRUE)
# rev <- as.data.frame(matrix(c(seq(0.001,1,0.001), round_any(interpole(seq(0.001,1,0.001), rd$revenu[1:597], rd$quantiles[1:597]), 0.1)), 1000, 2))
# names(rev) <- c("quantiles", "revenus")
#ad <- read.csv2("behavioral_response_adultes.csv")
rr <- read.csv("/var/www/enquete/reforme_mediane.csv", sep="\t")
rr[-1]
rr[-1,]
# names(at) <- c("quantiles", "revenus")
# write.table(matrix(c(seq(0.001,1,0.001), round_any(interpole(seq(0.001,1,0.001), at$revenu[1:595], at$quantiles[1:595]), 0.1)), 1000, 2), file="../distributions/rev_imputable_i", sep = ";", row.names = FALSE, col.names = TRUE)
# av <- as.data.frame(matrix(c(seq(0.001,1,0.001), round_any(interpole(seq(0.001,1,0.001), at$revenu[1:595], at$quantiles[1:595]), 0.1)), 1000, 2))
# names(av) <- c("quantiles", "revenus")
# rd <- read.csv("/media/adrien/895f16d0-85c8-4b2e-aba8-357389065e47/adrien/DD/Économie/Données/ERFS_2012/fonctionRepartition_revdisp_i.txt", sep="\t")
# names(rd) <- c("quantiles", "revenus")
# write.table(matrix(c(seq(0.001,1,0.001), round_any(interpole(seq(0.001,1,0.001), rd$revenu[1:597], rd$quantiles[1:597]), 0.1)), 1000, 2), file="../distributions/revenu_disponible_i", sep = ";", row.names = FALSE, col.names = TRUE)
# rev <- as.data.frame(matrix(c(seq(0.001,1,0.001), round_any(interpole(seq(0.001,1,0.001), rd$revenu[1:597], rd$quantiles[1:597]), 0.1)), 1000, 2))
# names(rev) <- c("quantiles", "revenus")
#ad <- read.csv2("behavioral_response_adultes.csv")
rr <- read.csv("/var/www/enquete/reforme_mediane.csv", sep="\t")
rr <- as.data.frame(matrix(c(seq(0.001,1,0.001), rr[-1,]), 1000, 2))
names(rr) <- c("quantiles", "revenus")
# names(at) <- c("quantiles", "revenus")
# write.table(matrix(c(seq(0.001,1,0.001), round_any(interpole(seq(0.001,1,0.001), at$revenu[1:595], at$quantiles[1:595]), 0.1)), 1000, 2), file="../distributions/rev_imputable_i", sep = ";", row.names = FALSE, col.names = TRUE)
# av <- as.data.frame(matrix(c(seq(0.001,1,0.001), round_any(interpole(seq(0.001,1,0.001), at$revenu[1:595], at$quantiles[1:595]), 0.1)), 1000, 2))
# names(av) <- c("quantiles", "revenus")
# rd <- read.csv("/media/adrien/895f16d0-85c8-4b2e-aba8-357389065e47/adrien/DD/Économie/Données/ERFS_2012/fonctionRepartition_revdisp_i.txt", sep="\t")
# names(rd) <- c("quantiles", "revenus")
# write.table(matrix(c(seq(0.001,1,0.001), round_any(interpole(seq(0.001,1,0.001), rd$revenu[1:597], rd$quantiles[1:597]), 0.1)), 1000, 2), file="../distributions/revenu_disponible_i", sep = ";", row.names = FALSE, col.names = TRUE)
# rev <- as.data.frame(matrix(c(seq(0.001,1,0.001), round_any(interpole(seq(0.001,1,0.001), rd$revenu[1:597], rd$quantiles[1:597]), 0.1)), 1000, 2))
# names(rev) <- c("quantiles", "revenus")
#ad <- read.csv2("behavioral_response_adultes.csv")
rr <- read.csv("/var/www/enquete/reforme_mediane.csv", sep="\t")
rr[-1,]
length(rr[-1,])
length(rr[,1])
length(rr)
# names(at) <- c("quantiles", "revenus")
# write.table(matrix(c(seq(0.001,1,0.001), round_any(interpole(seq(0.001,1,0.001), at$revenu[1:595], at$quantiles[1:595]), 0.1)), 1000, 2), file="../distributions/rev_imputable_i", sep = ";", row.names = FALSE, col.names = TRUE)
# av <- as.data.frame(matrix(c(seq(0.001,1,0.001), round_any(interpole(seq(0.001,1,0.001), at$revenu[1:595], at$quantiles[1:595]), 0.1)), 1000, 2))
# names(av) <- c("quantiles", "revenus")
# rd <- read.csv("/media/adrien/895f16d0-85c8-4b2e-aba8-357389065e47/adrien/DD/Économie/Données/ERFS_2012/fonctionRepartition_revdisp_i.txt", sep="\t")
# names(rd) <- c("quantiles", "revenus")
# write.table(matrix(c(seq(0.001,1,0.001), round_any(interpole(seq(0.001,1,0.001), rd$revenu[1:597], rd$quantiles[1:597]), 0.1)), 1000, 2), file="../distributions/revenu_disponible_i", sep = ";", row.names = FALSE, col.names = TRUE)
# rev <- as.data.frame(matrix(c(seq(0.001,1,0.001), round_any(interpole(seq(0.001,1,0.001), rd$revenu[1:597], rd$quantiles[1:597]), 0.1)), 1000, 2))
# names(rev) <- c("quantiles", "revenus")
#ad <- read.csv2("behavioral_response_adultes.csv")
rr <- read.csv("/var/www/enquete/reforme_mediane.csv", sep="\t")
rr <- as.data.frame(matrix(c(seq(0.001,1,0.001), rr[,1]), 1000, 2))
names(rr) <- c("quantiles", "revenus")
rr
write.table(rr, file="revdisp_i_median", sep = ";", row.names = FALSE, col.names = TRUE)
package("foreign")
package("memisc")
package("Hmisc")
package("DT")
package("pastecs")
package("lsr")
package("ggplot2")
package("stringr")
package("survey")
package("plotly")
package("plyr")
package("quantreg")
package("asbio")
test_c <- c(rep(1,544),rep(0,456),rep(1,500),rep(0,500))
test_d <- c(rep(1,1000),rep(0,1000))
summary(lm(test_c ~ test_d))
summary(pm(test_c ~ test_d))
rbernoulli(544,1000)
binconf(500,1000,0.5)
binconf(500,1000,0.05)
binconf(500,1000)
qt(0.5, 1000)
qt(0.95, 1000)
qnorm(0.95)
qnorm(0.975)
summary(pm(rep(test_c,100) ~ rep(test_d,100)))
test_c
test_cl <- rep(test_c,100)
test_dl <- rep(test_d,100)
summary(pm(test_cl ~ test_dl)
)
summary(pm(test_c ~ test_d))
summary(lm(test_cl ~ test_dl))
summary(lm(rep(test_c,10) ~ rep(test_d,10)))
summary(lm(rep(test_c,3) ~ rep(test_d,3)))
10^-.5
1000^-.5
1000^-.5*0.544*0.456*4
summary(pm(test_c ~ test_d))
summary(lm(test_c ~ test_d))
500^-.5*0.544*0.456*4
1000^-.5*0.456^2*2
qnorm(0.975, 2)
qnorm(0.975, sd=(0.456/1000)^.5)
qt(0.975, 1000)
(0.456/1000)^.5
(0.456/1000)^.5*qt(0.975, 1000)
binconf(500,1000,0.05)
test_c <- c(rep(1,522),rep(0,478),rep(1,500),rep(0,500))
summary(lm(test_c ~ test_d))
test_c <- c(rep(1,542),rep(0,458),rep(1,500),rep(0,500))
summary(lm(test_c ~ test_d))
test_c <- c(rep(1,544),rep(0,456),rep(1,500),rep(0,500))
(0.544/1000)^.5*qt(0.975, 1000)
(0.544/1000)^.5
(0.5/1000)^.5
(0.5/1000)^.5*qt(0.975, 1000)
binconf(500,1000,0.05)
(0.522/1000)^.5*qt(0.975, 1000)
(0.522/1000)^.5
((0.5^3+0.5*0.456^2)/1000)^.5
((0.5^2+0.5*0.456)/1000)^.5
(2*0.544*0.456/1000)^.5
(2*0.544*0.5/1000)^.5
summary(lm(test_c ~ test_d))
(0.522/1000)^.5
(2*0.544*0.5/999)^.5
((0.25+0.544*0.456)/2000)^.5
((0.25+0.544*0.456)/1000)^.5
((0.25+0.544*0.5)/1000)^.5
((0.25+0.5*0.456)/1000)^.5
((0.25+0.544*0.456)/1000)^.5
((0.25+0.544*0.456)/999)^.5
(2*0.544*0.456/1000)^.5
(0.544*0.456/1000)^.5
(2*0.544*0.456/1000)^.5
(2*0.544*0.456/999)^.5
(0.544*0.456/1998)^.5
0.544*0.456/1998
2*(0.544*0.456/1998)^.5
2*(0.25/999)^.5
2*((0.25+0.544*0.456)*0.5/1998)^.5
qnorm()
qnorm(0.05)
qnorm(0.025)
0.04400/0.02233
0.2/(2/1000)^.5
0.1/(2/1000)^.5
0.05/(0.25/2000)^.5
0.05/(0.25/1000)^.5
0.044/(0.25/1000)^.5
0.044/(0.25/2000)^.5
0.022/(0.25/2000)^.5
0.044/(0.25/1000)^.5
0.044/(0.5/1000)^.5
0.1/(2/1000)^.5
0.05/(0.5/1000)^.5
5%2
5%%2
6%%2
maxp(c(1,-1), 0)
pmax(c(1,-1), 0)
grand_electeur <- function(nb_hab) {
# if (nb_hab<500) ge <- 1
# else if (nb_hab<1500) ge <- 3
# else if (nb_hab<2500) ge <- 5
# else if (nb_hab<3500) ge <- 7
# else if (nb_hab<9000) ge <- 15
# else if (nb_hab<10000) ge <- 29
# else if (nb_hab<20000) ge <- 33
# else if (nb_hab<30000) ge <- 35
# else ge <- 35 + (nb_hab-30000)%%800
# return(ge)
return((nb_hab<500) + (nb_hab>=500)*2 + (nb_hab>=1500)*2 + (nb_hab>=2500)*2 + (nb_hab>=3500)*8 + (nb_hab>=9000)*21 + (nb_hab>=10000)*4
+ (nb_hab>=20000)*2 + pmax((nb_hab-30000)%%800, 0))
}
grand_electeur(c(400, 2000, 8000, 9500, 50000))
grand_electeur <- function(nb_hab) {
if (nb_hab<500) ge <- 1
else if (nb_hab<1500) ge <- 3
else if (nb_hab<2500) ge <- 5
else if (nb_hab<3500) ge <- 7
else if (nb_hab<9000) ge <- 15
else if (nb_hab<10000) ge <- 29
else if (nb_hab<20000) ge <- 33
else if (nb_hab<30000) ge <- 35
else ge <- 35 + (nb_hab-30000)%%800
return(ge)
# return((nb_hab<500) + (nb_hab>=500)*2 + (nb_hab>=1500)*2 + (nb_hab>=2500)*2 + (nb_hab>=3500)*8 + (nb_hab>=9000)*21 + (nb_hab>=10000)*4
#   + (nb_hab>=20000)*2 + pmax((nb_hab-30000)%%800, 0))
}
grand_electeur(c(400, 2000, 8000, 9500, 50000))
grand_electeur(400)
grand_electeur(2000)
grand_electeur(8000)
grand_electeur(9500)
grand_electeur(50000)
20000%%800
##### Sénat : Collège électoral #####
grand_electeur <- function(nb_hab) {
# if (nb_hab<500) ge <- 1
# else if (nb_hab<1500) ge <- 3
# else if (nb_hab<2500) ge <- 5
# else if (nb_hab<3500) ge <- 7
# else if (nb_hab<9000) ge <- 15
# else if (nb_hab<10000) ge <- 29
# else if (nb_hab<20000) ge <- 33
# else if (nb_hab<30000) ge <- 35
# else ge <- 35 + floor((nb_hab-30000)/800)
# return(ge)
return((nb_hab<500) + (nb_hab>=500)*2 + (nb_hab>=1500)*2 + (nb_hab>=2500)*2 + (nb_hab>=3500)*8 + (nb_hab>=9000)*21 + (nb_hab>=10000)*4
+ (nb_hab>=20000)*2 + pmax(floor((nb_hab-30000)/800), 0))
}
grand_electeur(c(400, 2000, 8000, 9500, 50000))
grand_electeur <- function(nb_hab) {
# if (nb_hab<500) ge <- 1
# else if (nb_hab<1500) ge <- 3
# else if (nb_hab<2500) ge <- 5
# else if (nb_hab<3500) ge <- 7
# else if (nb_hab<9000) ge <- 15
# else if (nb_hab<10000) ge <- 29
# else if (nb_hab<20000) ge <- 33
# else if (nb_hab<30000) ge <- 35
# else ge <- 35 + floor((nb_hab-30000)/800)
# return(ge)
return((nb_hab<500) + (nb_hab>=500)*3 + (nb_hab>=1500)*2 + (nb_hab>=2500)*2 + (nb_hab>=3500)*8 + (nb_hab>=9000)*21 + (nb_hab>=10000)*4
+ (nb_hab>=20000)*2 + pmax(floor((nb_hab-30000)/800), 0))
}
grand_electeur(c(400, 2000, 8000, 9500, 50000))
grand_electeur <- function(nb_hab) {
# if (nb_hab<500) ge <- 1
# else if (nb_hab<1500) ge <- 3
# else if (nb_hab<2500) ge <- 5
# else if (nb_hab<3500) ge <- 7
# else if (nb_hab<9000) ge <- 15
# else if (nb_hab<10000) ge <- 29
# else if (nb_hab<20000) ge <- 33
# else if (nb_hab<30000) ge <- 35
# else ge <- 35 + floor((nb_hab-30000)/800)
# return(ge)
return((nb_hab<500) + (nb_hab>=500)*3 + (nb_hab>=1500)*2 + (nb_hab>=2500)*2 + (nb_hab>=3500)*8 + (nb_hab>=9000)*14 + (nb_hab>=10000)*4
+ (nb_hab>=20000)*2 + pmax(floor((nb_hab-30000)/800), 0))
}
grand_electeur(c(400, 2000, 8000, 9500, 50000))
grand_electeur <- function(nb_hab) {
# if (nb_hab<500) ge <- 1
# else if (nb_hab<1500) ge <- 3
# else if (nb_hab<2500) ge <- 5
# else if (nb_hab<3500) ge <- 7
# else if (nb_hab<9000) ge <- 15
# else if (nb_hab<10000) ge <- 29
# else if (nb_hab<20000) ge <- 33
# else if (nb_hab<30000) ge <- 35
# else ge <- 35 + floor((nb_hab-30000)/800)
# return(ge)
return((nb_hab<500) + (nb_hab>=500)*3 + (nb_hab>=1500)*2 + (nb_hab>=2500)*2 + (nb_hab>=3500)*8 + (nb_hab>=9000)*14 + (nb_hab>=10000)*4
+ (nb_hab>=20000)*2 + (nb_hab>=30000)*4  + (nb_hab>=40000)*4  + (nb_hab>=50000)*2  + (nb_hab>=60000)*4  + (nb_hab>=80000)*4
+ (nb_hab>=100000)*2  + (nb_hab>=150000)*4  + (nb_hab>=200000)*2 + (nb_hab>=250000)*4  + (nb_hab>=300000)*4
# + pmax(floor((nb_hab-30000)/800), 0)
)
}
grand_electeur(c(400, 2000, 8000, 9500, 50000, 85000, 125000, 285000, 365000))
grand_electeur <- function(nb_hab) {
# if (nb_hab<500) ge <- 1
# else if (nb_hab<1500) ge <- 3
# else if (nb_hab<2500) ge <- 5
# else if (nb_hab<3500) ge <- 7
# else if (nb_hab<9000) ge <- 15
# else if (nb_hab<10000) ge <- 29
# else if (nb_hab<20000) ge <- 33
# else if (nb_hab<30000) ge <- 35
# else ge <- 35 + floor((nb_hab-30000)/800)
# return(ge)
return((nb_hab<500) + (nb_hab>=500)*3 + (nb_hab>=1500)*2 + (nb_hab>=2500)*2 + (nb_hab>=3500)*8 + (nb_hab>=9000)*14 + (nb_hab>=10000)*4
+ (nb_hab>=20000)*2 + (nb_hab>=30000)*4  + (nb_hab>=40000)*4  + (nb_hab>=50000)*2  + (nb_hab>=60000)*4  + (nb_hab>=80000)*4
+ (nb_hab>=100000)*2  + (nb_hab>=150000)*4  + (nb_hab>=200000)*2 + (nb_hab>=250000)*4  + (nb_hab>=300000)*4
+ pmax(floor((nb_hab-30000)/800), 0)
)
}
pmax(floor((50000-30000)/800), 0)
20000/800
plot(avant40, grand_electeur(avant40))
avant40 <- seq(0,40000,by=100)
plot(avant40, grand_electeur(avant40))
plot(avant40, grand_electeur(avant40), type='l')
plot(avant40, grand_electeur(avant40), type='l', main="Nombre de grands électeurs par commune", xlab="Population de la commune", ylab="Nombre de grands électeurs")
sous1M <- seq(0,1000000,by=1000)
plot(sous1M, grand_electeur(sous1M), type='l', main="Nombre de grands électeurs par commune", xlab="Population de la commune", ylab="Nombre de grands électeurs")
sous100k <- seq(0,100000,by=1000)
plot(sous100k, grand_electeur(sous100k), type='l', main="Nombre de grands électeurs par commune", xlab="Population de la commune", ylab="Nombre de grands électeurs")
lines(sous100k, sous100k/800, type='l', col='blue')
lines(sous100k, 50+sous100k/800, type='l', col='blue')
lines(sous100k, 10+sous100k/800, type='l', col='blue')
plot(sous100k, grand_electeur(sous100k), type='l', main="Nombre de grands électeurs par commune", xlab="Population de la commune", ylab="Nombre de grands électeurs")
lines(sous100k, 10+sous100k/800, type='l', col='blue')
plot(sous40k, grand_electeur(sous40k), type='l', main="Nombre de grands électeurs par commune", xlab="Population de la commune", ylab="Nombre de grands électeurs")
lines(sous100k, 10+sous100k/800, type='l', col='blue')
lines(sous100k, sous100k/800, type='l', col='green')
lines(sous100k, 1+sous100k/800, type='l', col='red')
lines(sous100k, 1+sous100k/600, type='l', col='orange')
lines(sous100k, 1+sous100k/700, type='l', col='darkgreen')
grand_electeur(30000)
1+30000/800
plot(sous100k, grand_electeur(sous100k), type='l', main="Nombre de grands électeurs par commune", xlab="Population de la commune", ylab="Nombre de grands électeurs")
lines(sous100k, 1+sous100k/800, type='l', col='red')
plot(sous40k, grand_electeur(sous40k), type='l', main="Nombre de grands électeurs par commune", xlab="Population de la commune", ylab="Nombre de grands électeurs")
lines(sous100k, 10+sous100k/800, type='l', col='blue')
plot(sous40k, grand_electeur(sous40k), type='l', main="Nombre de grands électeurs par commune", xlab="Population de la commune", ylab="Nombre de grands électeurs")
sous40k <- seq(0,40000,by=100)
plot(sous40k, grand_electeur(sous40k), type='l', main="Nombre de grands électeurs par commune", xlab="Population de la commune", ylab="Nombre de grands électeurs")
lines(sous100k, 1+sous100k/800, type='l', col='red')
conseillers_municipaux <- function(nb_hab) {
return((nb_hab<100)*7 + (nb_hab>=100)*11 + (nb_hab>=500)*4 + (nb_hab>=1500)*4 + (nb_hab>=2500)*4 + (nb_hab>=3500)*4 + (nb_hab>=5000)*2 + (nb_hab>=10000)*4
+ (nb_hab>=20000)*2 + (nb_hab>=30000)*4  + (nb_hab>=40000)*4  + (nb_hab>=50000)*2  + (nb_hab>=60000)*4  + (nb_hab>=80000)*4
+ (nb_hab>=100000)*2  + (nb_hab>=150000)*4  + (nb_hab>=200000)*2 + (nb_hab>=250000)*4  + (nb_hab>=300000)*4
+ pmax(floor((nb_hab-30000)/800), 0)
)
}
conseillers_municipaux(c(50,200,2000,8000,35000))
conseillers_municipaux <- function(nb_hab) {
return((nb_hab<100)*7 + (nb_hab>=100)*11 + (nb_hab>=500)*4 + (nb_hab>=1500)*4 + (nb_hab>=2500)*4 + (nb_hab>=3500)*4 + (nb_hab>=5000)*2 + (nb_hab>=10000)*4
+ (nb_hab>=20000)*2 + (nb_hab>=30000)*4  + (nb_hab>=40000)*4  + (nb_hab>=50000)*2  + (nb_hab>=60000)*4  + (nb_hab>=80000)*4
+ (nb_hab>=100000)*2  + (nb_hab>=150000)*4  + (nb_hab>=200000)*2 + (nb_hab>=250000)*4  + (nb_hab>=300000)*4
)
}
conseillers_municipaux(c(50,200,2000,8000,35000))
plot(sous40k, grand_electeur(sous40k), type='l', main="Nombre de grands électeurs par commune", xlab="Population de la commune", ylab="Nombre de grands électeurs")
lines(sous100k, conseillers_municipaux(sous40k), type='l', col='blue')
lines(sous40k, conseillers_municipaux(sous40k), type='l', col='blue')
lines(sous100k, 1+sous100k/800, type='l', col='red')
abline(v = 28000)
abline(v = 27000)
abline(v = 27500)
plot(sous40k, grand_electeur(sous40k), type='l', main="Nombre de grands électeurs par commune", xlab="Population de la commune", ylab="Nombre de grands électeurs")
plot(sous100k, grand_electeur(sous100k), type='l', main="Nombre de grands électeurs par commune", xlab="Population de la commune", ylab="Nombre de grands électeurs")
plot(sous40k, grand_electeur(sous40k), type='l', main="Nombre de grands électeurs par commune", xlab="Population de la commune", ylab="Nombre de grands électeurs")
lines(sous40k, conseillers_municipaux(sous40k), type='l', col='blue')
lines(sous100k, 1+sous100k/800, type='l', col='red')
abline(v = 27000)
abline(v = 29000)
abline(v = 30000)
plot(sous40k, grand_electeur(sous40k), type='l', main="Nombre de grands électeurs par commune", xlab="Population de la commune", ylab="Nombre de grands électeurs")
lines(sous40k, conseillers_municipaux(sous40k), type='l', col='blue')
lines(sous100k, 1+sous100k/800, type='l', col='red')
abline(v = 27000)
package('foreign')
package("readxl")
package("mfx")
package("Hmisc")
package("plyr")
# setwd("/var/www/We give the 99 percents/Redécoupage") # /!\ Changer le chemin d'accès
setwd("/var/www/RedecoupageEquitable/Annexes") # /!\ Changer le chemin d'accès
load("env.RData")
iris_original <- read.dbf("IRIS/Métropole/IRIS 2015 original.dbf")
